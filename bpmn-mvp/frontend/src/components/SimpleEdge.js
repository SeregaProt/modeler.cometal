import React, { useState, useCallback } from 'react';
import { BaseEdge, getBezierPath, EdgeLabelRenderer } from '@xyflow/react';
import { 
  IconButton, 
  Tooltip, 
  Menu, 
  MenuItem, 
  ListItemIcon, 
  ListItemText,
  Divider,
  Box
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import SettingsIcon from '@mui/icons-material/Settings';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import SwapHorizIcon from '@mui/icons-material/SwapHoriz';
import RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';

const SimpleEdge = ({
  id,
  sourceX,
  sourceY,
  targetX,
  targetY,
  sourcePosition,
  targetPosition,
  style = {},
  markerEnd,
  markerStart,
  selected,
  data,
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [menuAnchor, setMenuAnchor] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  
  const [edgePath, labelX, labelY] = getBezierPath({
    sourceX,
    sourceY,
    sourcePosition,
    targetX,
    targetY,
    targetPosition,
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏
  const handleDelete = useCallback((evt) => {
    evt.stopPropagation();
    if (data && data.onDelete) {
      data.onDelete(id);
    }
    setMenuAnchor(null);
  }, [id, data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleSettingsClick = useCallback((evt) => {
    evt.stopPropagation();
    setMenuAnchor(evt.currentTarget);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
  const handleMenuClose = useCallback(() => {
    setMenuAnchor(null);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç—Ä–µ–ª–æ–∫
  const handleArrowChange = useCallback((startType, endType) => {
    if (data && data.onArrowChange) {
      data.onArrowChange(id, startType, endType);
    }
    setMenuAnchor(null);
  }, [id, data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ç–æ—á–∫–∏ —Å–≤—è–∑–∏
  const handleConnectionPointMouseDown = useCallback((evt, isStart) => {
    evt.stopPropagation();
    setIsDragging(true);
    
    console.log('üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ', isStart ? '–∏—Å—Ç–æ—á–Ω–∏–∫–∞' : '—Ü–µ–ª–∏', '—Å–≤—è–∑–∏:', id);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Ç–æ—á–∫—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º
    const dragType = isStart ? 'source' : 'target';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const handleMouseMove = (e) => {
      // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      document.body.style.cursor = 'grabbing';
    };
    
    const handleMouseUp = (e) => {
      console.log('üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ —Å–≤—è–∑–∏');
      
      // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
      const elements = document.elementsFromPoint(e.clientX, e.clientY);
      let targetNodeId = null;
      let targetHandle = null;
      
      for (const element of elements) {
        const nodeElement = element.closest('[data-id]');
        if (nodeElement) {
          const nodeId = nodeElement.getAttribute('data-id');
          if (nodeId) {
            targetNodeId = nodeId;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –Ω–∞ —É–∑–ª–µ
            const rect = nodeElement.getBoundingClientRect();
            const centerX = rect.left + rect.width / 2;
            const centerY = rect.top + rect.height / 2;
            const mouseX = e.clientX;
            const mouseY = e.clientY;
            
            const deltaX = mouseX - centerX;
            const deltaY = mouseY - centerY;
            
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
              targetHandle = deltaX > 0 ? 'right' : 'left';
            } else {
              targetHandle = deltaY > 0 ? 'bottom' : 'top';
            }
            break;
          }
        }
      }
      
      if (targetNodeId && targetHandle && data && data.onUpdateHandles) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ handles –∏–∑ edge
        const currentSourceHandle = sourcePosition.toLowerCase();
        const currentTargetHandle = targetPosition.toLowerCase();
        
        if (dragType === 'source') {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
          console.log('‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤—è–∑–∏:', targetHandle, '->', currentTargetHandle);
          data.onUpdateHandles(id, targetHandle, currentTargetHandle);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
          console.log('‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å —Å–≤—è–∑–∏:', currentSourceHandle, '->', targetHandle);
          data.onUpdateHandles(id, currentSourceHandle, targetHandle);
        }
      } else {
        console.log('‚ùå –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–ª–∏');
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setIsDragging(false);
      document.body.style.cursor = 'default';
      
      // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  }, [id, data, sourcePosition, targetPosition]);

  // –°—Ç–∏–ª—å —Å–≤—è–∑–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º
  const edgeStyle = {
    ...style,
    strokeWidth: selected ? 3 : isHovered ? 2.5 : 2,
    stroke: selected ? '#2196f3' : style.stroke || '#2196f3',
    strokeDasharray: 'none',
    transition: 'all 0.2s ease',
    filter: selected ? 'drop-shadow(0 2px 4px rgba(33,150,243,0.3))' : 'none',
  };

  // –°—Ç–∏–ª—å –¥–ª—è —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è - –í–°–ï–ì–î–ê –í–ò–î–ò–ú–´–ï
  const connectionPointStyle = {
    width: 14,
    height: 14,
    background: isDragging ? '#ff9800' : (selected ? '#2196f3' : '#1976d2'),
    border: '3px solid white',
    borderRadius: '50%',
    cursor: isDragging ? 'grabbing' : 'grab',
    boxShadow: '0 3px 8px rgba(0,0,0,0.3)',
    opacity: 1, // –í–°–ï–ì–î–ê –í–ò–î–ò–ú–´–ï!
    transition: 'all 0.2s ease',
    pointerEvents: 'auto', // –í–°–ï–ì–î–ê –ê–ö–¢–ò–í–ù–´–ï!
    transform: isDragging ? 'scale(1.3)' : (selected || isHovered ? 'scale(1.1)' : 'scale(0.8)'),
    zIndex: 1000,
  };

  return (
    <>
      <BaseEdge 
        path={edgePath} 
        markerEnd={markerEnd}
        markerStart={markerStart}
        style={edgeStyle}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      />
      
      {/* –¢–æ—á–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –í–°–ï–ì–î–ê –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è */}
      <EdgeLabelRenderer>
        {/* –¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∏ */}
        <div
          style={{
            position: 'absolute',
            transform: `translate(-50%, -50%) translate(${sourceX}px,${sourceY}px)`,
            pointerEvents: 'all',
            ...connectionPointStyle,
          }}
          className="nodrag nopan"
          onMouseDown={(e) => handleConnectionPointMouseDown(e, true)}
          title="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å –Ω–∞—á–∞–ª–æ —Å–≤—è–∑–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É"
        />

        {/* –¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ü–∞ —Å–≤—è–∑–∏ */}
        <div
          style={{
            position: 'absolute',
            transform: `translate(-50%, -50%) translate(${targetX}px,${targetY}px)`,
            pointerEvents: 'all',
            ...connectionPointStyle,
          }}
          className="nodrag nopan"
          onMouseDown={(e) => handleConnectionPointMouseDown(e, false)}
          title="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å –∫–æ–Ω–µ—Ü —Å–≤—è–∑–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É"
        />

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ */}
        {selected && (
          <div
            style={{
              position: 'absolute',
              transform: `translate(-50%, -50%) translate(${labelX}px,${labelY}px)`,
              pointerEvents: 'all',
            }}
            className="nodrag nopan"
          >
            <Box sx={{ display: 'flex', gap: 0.5 }}>
              {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
              <Tooltip title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤—è–∑–∏">
                <IconButton
                  size="small"
                  onClick={handleSettingsClick}
                  sx={{
                    background: 'white',
                    border: '1px solid #2196f3',
                    width: 24,
                    height: 24,
                    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
                    '&:hover': { 
                      background: '#e3f2fd',
                      transform: 'scale(1.1)',
                    },
                    transition: 'all 0.15s ease',
                  }}
                >
                  <SettingsIcon fontSize="small" color="primary" />
                </IconButton>
              </Tooltip>

              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
              <Tooltip title="–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å">
                <IconButton
                  size="small"
                  onClick={handleDelete}
                  sx={{
                    background: 'white',
                    border: '1px solid #f44336',
                    width: 24,
                    height: 24,
                    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
                    '&:hover': { 
                      background: '#ffebee',
                      transform: 'scale(1.1)',
                    },
                    transition: 'all 0.15s ease',
                  }}
                >
                  <DeleteIcon fontSize="small" color="error" />
                </IconButton>
              </Tooltip>
            </Box>
          </div>
        )}
      </EdgeLabelRenderer>

      {/* –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–µ–ª–æ–∫ */}
      <Menu
        anchorEl={menuAnchor}
        open={Boolean(menuAnchor)}
        onClose={handleMenuClose}
        PaperProps={{
          sx: {
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            border: '1px solid #e0e0e0',
          }
        }}
      >
        <MenuItem disabled>
          <ListItemText primary="–¢–∏–ø —Å—Ç—Ä–µ–ª–æ–∫" sx={{ fontWeight: 'bold' }} />
        </MenuItem>
        <Divider />
        
        <MenuItem onClick={() => handleArrowChange(null, 'arrow')}>
          <ListItemIcon>
            <ArrowForwardIcon />
          </ListItemIcon>
          <ListItemText primary="–¢–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞" />
        </MenuItem>
        
        <MenuItem onClick={() => handleArrowChange('arrow', 'arrow')}>
          <ListItemIcon>
            <SwapHorizIcon />
          </ListItemIcon>
          <ListItemText primary="–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å—Ç—Ä–µ–ª–∫–∞" />
        </MenuItem>
        
        <MenuItem onClick={() => handleArrowChange('arrow', null)}>
          <ListItemIcon>
            <ArrowBackIcon />
          </ListItemIcon>
          <ListItemText primary="–¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞" />
        </MenuItem>
        
        <MenuItem onClick={() => handleArrowChange(null, null)}>
          <ListItemIcon>
            <RadioButtonUncheckedIcon />
          </ListItemIcon>
          <ListItemText primary="–ë–µ–∑ —Å—Ç—Ä–µ–ª–æ–∫" />
        </MenuItem>
        
        <Divider />
        
        <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>
          <ListItemIcon>
            <DeleteIcon color="error" />
          </ListItemIcon>
          <ListItemText primary="–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å" />
        </MenuItem>
      </Menu>
    </>
  );
};

export default SimpleEdge;