import React, { useState, useCallback, useRef } from 'react';
import {
  Box, Typography, Button, IconButton, Card, CardContent
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import DescriptionIcon from '@mui/icons-material/Description';
import { Handle, Position } from '@xyflow/react';

// –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π —Å drag-and-drop –∫–∞–∫ –≤ Miro
function ProcessNode({ data, selected, id }) {
  const [isHovered, setIsHovered] = useState(false);
  const [hoveredConnectionPoint, setHoveredConnectionPoint] = useState(null);
  const nodeRef = useRef(null);
  
  const isHighlighted = data.highlighted;
  const isFound = data.found;
  const isConnecting = data.isConnecting; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏
  const showHoverPoints = data.showHoverPoints; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏ –∏–ª–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  const showConnectionPoints = selected || isConnecting || showHoverPoints;
  
  // –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Å–∏–Ω–∏—Ö —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const connectionPointStyle = {
    width: 8,
    height: 8,
    background: '#0073e6',
    border: '2px solid white',
    borderRadius: '50%',
    cursor: 'pointer',
    opacity: showConnectionPoints ? 1 : 0,
    transition: 'all 0.15s ease',
    zIndex: 10,
    boxShadow: '0 1px 3px rgba(0,0,0,0.2)',
    pointerEvents: showConnectionPoints ? 'auto' : 'none',
  };
  
  // –°—Ç–∏–ª—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Ç–æ—á–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const hoveredConnectionPointStyle = {
    ...connectionPointStyle,
    width: 10,
    height: 10,
    background: '#005bb5',
    boxShadow: '0 2px 6px rgba(0,0,0,0.3)',
    transform: 'scale(1.1)',
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleConnectionPointHover = useCallback((pointId) => {
    setHoveredConnectionPoint(pointId);
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ —Å —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleConnectionPointLeave = useCallback(() => {
    setHoveredConnectionPoint(null);
  }, []);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const getConnectionPointStyle = (pointId) => {
    return hoveredConnectionPoint === pointId 
      ? hoveredConnectionPointStyle 
      : connectionPointStyle;
  };

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleConnectionPointClick = useCallback((pointId, event) => {
    console.log('üîµ –ö–õ–ò–ö –ü–û –¢–û–ß–ö–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø:', { pointId, nodeId: id });
    console.log('üìä –î–∞–Ω–Ω—ã–µ —É–∑–ª–∞:', { 
      isConnecting: data.isConnecting, 
      showHoverPoints: data.showHoverPoints,
      onStartConnection: !!data.onStartConnection,
      allKeys: Object.keys(data)
    });
    
    event.stopPropagation();
    event.preventDefault();
    
    if (data.onStartConnection) {
      console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º onStartConnection —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', id, pointId);
      data.onStartConnection(id, pointId);
    } else {
      console.log('‚ùå onStartConnection –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ data:', Object.keys(data));
    }
  }, [id, data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = useCallback((pointId, event) => {
    console.log('üñ±Ô∏è MOUSEDOWN –ù–ê –¢–û–ß–ö–ï:', pointId);
    
    // –ü—Ä–æ–≤ÔøΩÔøΩ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
    if (event.button !== 0) return;
    
    event.stopPropagation();
    
    // –ù–∞—á–∏–Ω–∞–µ–º drag-—Ä–µ–∂–∏–º
    if (data.onStartDrag) {
      console.log('‚úÖ –ù–∞—á–∏–Ω–∞–µ–º drag –æ—Ç —Ç–æ—á–∫–∏:', pointId);
      data.onStartDrag(id, pointId, event);
    } else {
      console.log('‚ùå onStartDrag –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ data');
    }
  }, [id, data]);
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const ConnectionPoint = ({ pointId, position, style, type = "source" }) => (
    <Handle
      type={type}
      position={position}
      id={`${pointId}-${type}`}
      style={{
        ...getConnectionPointStyle(pointId),
        ...style,
      }}
      onMouseEnter={() => handleConnectionPointHover(pointId)}
      onMouseLeave={handleConnectionPointLeave}
      onClick={(e) => handleConnectionPointClick(pointId, e)}
      onMouseDown={(e) => handleMouseDown(pointId, e)}
    />
  );
  
  return (
    <Box 
      ref={nodeRef}
      sx={{ position: 'relative' }}
      onMouseEnter={() => {
        setIsHovered(true);
        if (data.onMouseEnter) {
          data.onMouseEnter();
        }
      }}
      onMouseLeave={() => {
        setIsHovered(false);
        if (data.onMouseLeave) {
          data.onMouseLeave();
        }
      }}
    >
      {/* –í–∏–¥–∏–º—ã–µ —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (source) - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
      
      {/* –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞ */}
      <ConnectionPoint
        pointId="top"
        position={Position.Top}
        style={{
          top: -4,
          left: '50%',
          transform: 'translateX(-50%)',
        }}
      />
      
      {/* –ü—Ä–∞–≤–∞—è —Ç–æ—á–∫–∞ */}
      <ConnectionPoint
        pointId="right"
        position={Position.Right}
        style={{
          right: -4,
          top: '50%',
          transform: 'translateY(-50%)',
        }}
      />
      
      {/* –ù–∏–∂–Ω—è—è —Ç–æ—á–∫–∞ */}
      <ConnectionPoint
        pointId="bottom"
        position={Position.Bottom}
        style={{
          bottom: -4,
          left: '50%',
          transform: 'translateX(-50%)',
        }}
      />
      
      {/* –õ–µ–≤–∞—è —Ç–æ—á–∫–∞ */}
      <ConnectionPoint
        pointId="left"
        position={Position.Left}
        style={{
          left: -4,
          top: '50%',
          transform: 'translateY(-50%)',
        }}
      />

      {/* –ù–µ–≤–∏–¥–∏–º—ã–µ target handles –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π */}
      <Handle
        type="target"
        position={Position.Top}
        id="top-target"
        style={{ opacity: 0, pointerEvents: 'none' }}
      />
      <Handle
        type="target"
        position={Position.Right}
        id="right-target"
        style={{ opacity: 0, pointerEvents: 'none' }}
      />
      <Handle
        type="target"
        position={Position.Bottom}
        id="bottom-target"
        style={{ opacity: 0, pointerEvents: 'none' }}
      />
      <Handle
        type="target"
        position={Position.Left}
        id="left-target"
        style={{ opacity: 0, pointerEvents: 'none' }}
      />
      
      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ */}
      <Card 
        sx={{ 
          minWidth: 220,
          maxWidth: 280,
          height: '100%', 
          display: 'flex', 
          flexDirection: 'column',
          cursor: 'pointer',
          transition: 'all 0.2s ease',
          border: selected || isHighlighted ? '2px solid #0073e6' : isFound ? '2px solid #ffd600' : '1px solid #e0e0e0',
          bgcolor: selected || isHighlighted ? '#f0f8ff' : isFound ? '#fffde7' : '#fff',
          boxShadow: selected || isHighlighted ? '0 4px 12px rgba(0,115,230,0.2)' : '0 1px 3px rgba(0,0,0,0.1)',
          '&:hover': { 
            transform: selected ? 'none' : 'translateY(-1px)',
            boxShadow: selected ? '0 4px 12px rgba(0,115,230,0.2)' : '0 2px 8px rgba(0,0,0,0.15)',
          }
        }}
      >
        <CardContent sx={{ flexGrow: 1, p: 2 }}>
          <Box display="flex" alignItems="center" mb={1.5}>
            <DescriptionIcon 
              sx={{ 
                mr: 1, 
                color: selected || isHighlighted ? '#0073e6' : '#666',
                fontSize: 20 
              }} 
            />
            <Typography 
              variant="subtitle1" 
              component="h3" 
              noWrap 
              sx={{ 
                fontWeight: selected || isHighlighted ? 600 : 500,
                color: selected || isHighlighted ? '#0073e6' : '#333',
                fontSize: '0.95rem',
              }}
            >
              {data.name}
            </Typography>
          </Box>
          
          <Typography 
            variant="body2" 
            color="text.secondary" 
            sx={{ fontSize: '0.8rem', mb: 1.5 }}
          >
            BPMN –ø—Ä–æ—Ü–µ—Å—Å
          </Typography>
          
          <Box>
            <Typography 
              variant="caption" 
              color="text.secondary"
              sx={{ fontSize: '0.75rem', display: 'block' }}
            >
              –ê–≤—Ç–æ—Ä: {data.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </Typography>
            <Typography 
              variant="caption" 
              color="text.secondary"
              sx={{ fontSize: '0.75rem', display: 'block' }}
            >
              –ò–∑–º–µ–Ω–µ–Ω: {data.updated_at ? new Date(data.updated_at).toLocaleDateString() : '–ù–∏–∫–æ–≥–¥–∞'}
            </Typography>
          </Box>
        </CardContent>
        
        <Box sx={{ p: 1.5, pt: 0, display: 'flex', gap: 1 }}>
          <Button 
            size="small" 
            variant="outlined"
            startIcon={<EditIcon />}
            fullWidth
            onClick={(e) => {
              e.stopPropagation();
              data.onEdit && data.onEdit();
            }}
            sx={{ 
              fontSize: '0.75rem',
              py: 0.5,
              borderColor: selected || isHighlighted ? '#0073e6' : '#ccc',
              color: selected || isHighlighted ? '#0073e6' : '#666',
            }}
          >
            –û—Ç–∫—Ä—ã—Ç—å
          </Button>
          <IconButton
            size="small"
            onClick={(e) => {
              e.stopPropagation();
              data.onDelete && data.onDelete();
            }}
            sx={{ 
              color: '#666',
              '&:hover': { color: '#f44336' },
            }}
            title="–£–¥–∞ÔøΩÔøΩ–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
          >
            <DeleteIcon fontSize="small" />
          </IconButton>
        </Box>
      </Card>
    </Box>
  );
}

export default ProcessNode;