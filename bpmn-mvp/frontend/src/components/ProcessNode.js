import React, { useState, useCallback } from 'react';
import {
  Box, Typography, Button, IconButton, Card, CardContent
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import DescriptionIcon from '@mui/icons-material/Description';
import { Handle, Position } from '@xyflow/react';

function ProcessNode({ data, selected, id }) {
  const [isHovered, setIsHovered] = useState(false);
  const [hoveredConnectionPoint, setHoveredConnectionPoint] = useState(null);
  
  const isHighlighted = data.highlighted;
  const isFound = data.found;
  const isConnecting = data.isConnecting;
  const isTargetHovered = data.isTargetHovered;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏, –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏–ª–∏ –∫–æ–≥–¥–∞ —Ç–∞—â–∞—Ç —Å–≤—è–∑—å
  const showConnectionPoints = (selected || isHovered || isConnecting || isTargetHovered) && !data.isEdgeSelected;
  
  // –°—Ç–∏–ª—å –¥–ª—è —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–∏–Ω–∏–µ —Ç–æ—á–∫–∏ —Å –ø–ª—é—Å–æ–º
  const connectionPointStyle = {
    width: 16,
    height: 16,
    background: isTargetHovered ? '#4caf50' : '#2196f3',
    border: '2px solid white',
    borderRadius: '50%',
    cursor: 'grab',
    opacity: showConnectionPoints ? 1 : 0,
    transition: 'opacity 0.2s ease',
    zIndex: 20,
    boxShadow: '0 2px 8px rgba(0,0,0,0.2)',
    pointerEvents: showConnectionPoints ? 'auto' : 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '10px',
    color: 'white',
    fontWeight: 'bold',
    userSelect: 'none',
  };
  
  // –°—Ç–∏–ª—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Ç–æ—á–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const hoveredConnectionPointStyle = {
    ...connectionPointStyle,
    width: 18,
    height: 18,
    background: isTargetHovered ? '#388e3c' : '#1976d2',
    boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
    cursor: 'grabbing',
  };
  
  // –°—Ç–∏–ª—å –¥–ª—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
  const magneticPointStyle = {
    width: 14,
    height: 14,
    background: '#4caf50',
    border: '2px solid white',
    borderRadius: '50%',
    opacity: isTargetHovered ? 1 : 0,
    transition: 'opacity 0.3s ease, transform 0.3s ease',
    zIndex: 25,
    boxShadow: '0 2px 8px rgba(76,175,80,0.4)',
    pointerEvents: 'none',
    animation: isTargetHovered ? 'pulse 1.5s infinite' : 'none',
    transform: isTargetHovered ? 'scale(1.1)' : 'scale(1)',
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const getConnectionPointStyle = (pointId) => {
    if (isTargetHovered) {
      return magneticPointStyle;
    }
    return hoveredConnectionPoint === pointId 
      ? hoveredConnectionPointStyle 
      : connectionPointStyle;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleConnectionPointHover = useCallback((pointId, event) => {
    if (!isTargetHovered) { // –ù–µ –º–µ–Ω—è–µ–º hover –µ—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
      event.stopPropagation();
      setHoveredConnectionPoint(pointId);
    }
  }, [isTargetHovered]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ —Å —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleConnectionPointLeave = useCallback((event) => {
    if (!isTargetHovered) { // –ù–µ –º–µ–Ω—è–µ–º hover –µ—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
      event.stopPropagation();
      setHoveredConnectionPoint(null);
    }
  }, [isTargetHovered]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —É–∑–µ–ª - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleNodeMouseEnter = useCallback((event) => {
    setIsHovered(true);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ —Å —É–∑–ª–∞
  const handleNodeMouseLeave = useCallback((event) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—à–ª–∏ –ª–∏ –º—ã –Ω–∞ —Ç–æ—á–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const relatedTarget = event.relatedTarget;
    if (relatedTarget && relatedTarget.closest && relatedTarget.closest('[data-connection-point]')) {
      return; // –ù–µ —É–±–∏—Ä–∞–µ–º hover –µ—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ç–æ—á–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    }
    
    setIsHovered(false);
    setHoveredConnectionPoint(null);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏ –Ω–∞ —É–∑–ª–µ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏)
  const handleNodeMouseUp = useCallback((event) => {
    console.log('üéØ MouseUp –Ω–∞ —É–∑–ª–µ:', id, 'isTargetHovered:', isTargetHovered);
    
    if (data.onEndDrag && isTargetHovered) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const rect = event.currentTarget.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      const mouseX = event.clientX;
      const mouseY = event.clientY;
      
      const deltaX = mouseX - centerX;
      const deltaY = mouseY - centerY;
      
      let closestPoint = 'top';
      if (Math.abs(deltaX) > Math.abs(deltaY)) {
        closestPoint = deltaX > 0 ? 'right' : 'left';
      } else {
        closestPoint = deltaY > 0 ? 'bottom' : 'top';
      }
      
      console.log('üéØ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –Ω–∞ —Ç–æ—á–∫–µ:', closestPoint);
      data.onEndDrag(id, closestPoint, event);
    }
  }, [id, data, isTargetHovered]);
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª—é—Å–æ–º
  const ConnectionPoint = ({ pointId, position, style }) => (
    <div
      data-connection-point={pointId}
      className="nodrag nopan"
      style={{
        position: 'absolute',
        ...getConnectionPointStyle(pointId),
        ...style,
      }}
      onMouseEnter={(e) => handleConnectionPointHover(pointId, e)}
      onMouseLeave={handleConnectionPointLeave}
      onMouseDown={(e) => {
        console.log('üîó MouseDown –Ω–∞ —Ç–æ—á–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', pointId, '—É–∑–ª–∞:', id);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
        e.stopPropagation();
        e.preventDefault();
        
        if (data.onStartDrag) {
          console.log('üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏');
          data.onStartDrag(id, pointId, e);
        }
      }}
      onDragStart={(e) => {
        e.preventDefault();
        e.stopPropagation();
      }}
      title={isTargetHovered ? "–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏" : "–ù–∞–∂–º–∏—Ç–µ –∏ —Ç—è–Ω–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏"}
    >
      {isTargetHovered ? '‚óè' : '+'}
    </div>
  );
  
  // –ù–µ–≤–∏–¥–∏–º—ã–µ handles –¥–ª—è ReactFlow
  const InvisibleHandle = ({ pointId, position, type = 'source' }) => (
    <Handle
      type={type}
      position={position}
      id={`${pointId}-${type}`}
      style={{
        opacity: 0,
        pointerEvents: 'none',
        width: 1,
        height: 1,
      }}
    />
  );
  
  return (
    <Box 
      sx={{ position: 'relative' }}
      data-id={id}
    >
      {/* –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏ */}
      <style>
        {`
          @keyframes pulse {
            0% { transform: scale(1.1); opacity: 1; }
            50% { transform: scale(1.3); opacity: 0.8; }
            100% { transform: scale(1.1); opacity: 1; }
          }
        `}
      </style>

      {/* –ù–µ–≤–∏–¥–∏–º–∞—è –∑–æ–Ω–∞ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è - —Ä–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ 40px –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã */}
      <Box
        sx={{
          position: 'absolute',
          top: -40,
          left: -40,
          right: -40,
          bottom: -40,
          zIndex: 5,
          pointerEvents: 'auto',
          cursor: 'default',
        }}
        onMouseEnter={handleNodeMouseEnter}
        onMouseLeave={handleNodeMouseLeave}
        onMouseUp={handleNodeMouseUp}
      />

      {/* –ù–µ–≤–∏–¥–∏–º—ã–µ handles –¥–ª—è ReactFlow */}
      <InvisibleHandle pointId="top" position={Position.Top} type="source" />
      <InvisibleHandle pointId="right" position={Position.Right} type="source" />
      <InvisibleHandle pointId="bottom" position={Position.Bottom} type="source" />
      <InvisibleHandle pointId="left" position={Position.Left} type="source" />
      
      <InvisibleHandle pointId="top" position={Position.Top} type="target" />
      <InvisibleHandle pointId="right" position={Position.Right} type="target" />
      <InvisibleHandle pointId="bottom" position={Position.Bottom} type="target" />
      <InvisibleHandle pointId="left" position={Position.Left} type="target" />

      {/* –í–∏–¥–∏–º—ã–µ —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª—é—Å–æ–º */}
      
      {/* –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞ - –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 3–º–º (~11px) –æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <ConnectionPoint
        pointId="top"
        position={Position.Top}
        style={{
          top: -14,
          left: '50%',
          transform: 'translateX(-50%)',
        }}
      />
      
      {/* –ü—Ä–∞–≤–∞—è —Ç–æ—á–∫–∞ */}
      <ConnectionPoint
        pointId="right"
        position={Position.Right}
        style={{
          right: -14,
          top: '50%',
          transform: 'translateY(-50%)',
        }}
      />
      
      {/* –ù–∏–∂–Ω—è—è —Ç–æ—á–∫–∞ */}
      <ConnectionPoint
        pointId="bottom"
        position={Position.Bottom}
        style={{
          bottom: -14,
          left: '50%',
          transform: 'translateX(-50%)',
        }}
      />
      
      {/* –õ–µ–≤–∞—è —Ç–æ—á–∫–∞ */}
      <ConnectionPoint
        pointId="left"
        position={Position.Left}
        style={{
          left: -14,
          top: '50%',
          transform: 'translateY(-50%)',
        }}
      />
      
      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ */}
      <Card 
        sx={{ 
          minWidth: 220,
          maxWidth: 280,
          height: '100%', 
          display: 'flex', 
          flexDirection: 'column',
          cursor: 'pointer',
          transition: 'all 0.3s ease',
          border: selected || isHighlighted ? '2px solid #2196f3' : 
                  isTargetHovered ? '3px solid #4caf50' :
                  isFound ? '2px solid #ffd600' : '1px solid #e0e0e0',
          bgcolor: selected || isHighlighted ? '#e3f2fd' : 
                   isTargetHovered ? '#e8f5e8' :
                   isFound ? '#fffde7' : '#fff',
          boxShadow: selected || isHighlighted ? '0 4px 12px rgba(33,150,243,0.2)' : 
                     isTargetHovered ? '0 6px 20px rgba(76,175,80,0.3)' :
                     '0 1px 3px rgba(0,0,0,0.1)',
          '&:hover': { 
            transform: selected || isTargetHovered ? 'none' : 'translateY(-1px)',
            boxShadow: selected ? '0 4px 12px rgba(33,150,243,0.2)' : 
                       isTargetHovered ? '0 6px 20px rgba(76,175,80,0.3)' :
                       '0 2px 8px rgba(0,0,0,0.15)',
          },
          zIndex: 10, // –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –Ω–µ–≤–∏–¥–∏–º–æ–π –∑–æ–Ω—ã
          position: 'relative',
        }}
      >
        <CardContent sx={{ flexGrow: 1, p: 2 }}>
          <Box display="flex" alignItems="center" mb={1.5}>
            <DescriptionIcon 
              sx={{ 
                mr: 1, 
                color: selected || isHighlighted ? '#2196f3' : 
                       isTargetHovered ? '#4caf50' : '#666',
                fontSize: 20 
              }} 
            />
            <Typography 
              variant="subtitle1" 
              component="h3" 
              noWrap 
              sx={{ 
                fontWeight: selected || isHighlighted ? 600 : 500,
                color: selected || isHighlighted ? '#2196f3' : 
                       isTargetHovered ? '#4caf50' : '#333',
                fontSize: '0.95rem',
              }}
            >
              {data.name}
            </Typography>
          </Box>
          
          <Typography 
            variant="body2" 
            color="text.secondary" 
            sx={{ fontSize: '0.8rem', mb: 1.5 }}
          >
            BPMN –ø—Ä–æ—Ü–µ—Å—Å
          </Typography>
          
          <Box>
            <Typography 
              variant="caption" 
              color="text.secondary"
              sx={{ fontSize: '0.75rem', display: 'block' }}
            >
              –ê–≤—Ç–æ—Ä: {data.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </Typography>
            <Typography 
              variant="caption" 
              color="text.secondary"
              sx={{ fontSize: '0.75rem', display: 'block' }}
            >
              –ò–∑–º–µ–Ω–µ–Ω: {data.updated_at ? new Date(data.updated_at).toLocaleDateString() : '–ù–∏–∫–æ–≥–¥–∞'}
            </Typography>
          </Box>
        </CardContent>
        
        <Box sx={{ p: 1.5, pt: 0, display: 'flex', gap: 1 }}>
          <Button 
            size="small" 
            variant="outlined"
            startIcon={<EditIcon />}
            fullWidth
            onClick={(e) => {
              e.stopPropagation();
              data.onEdit && data.onEdit();
            }}
            sx={{ 
              fontSize: '0.75rem',
              py: 0.5,
              borderColor: selected || isHighlighted ? '#2196f3' : '#ccc',
              color: selected || isHighlighted ? '#2196f3' : '#666',
            }}
          >
            –û—Ç–∫—Ä—ã—Ç—å
          </Button>
          <IconButton
            size="small"
            onClick={(e) => {
              e.stopPropagation();
              data.onDelete && data.onDelete();
            }}
            sx={{ 
              color: '#666',
              '&:hover': { color: '#f44336' },
            }}
            title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
          >
            <DeleteIcon fontSize="small" />
          </IconButton>
        </Box>
      </Card>
    </Box>
  );
}

export default ProcessNode;